//////// GLOBAL VARIABLES ////////
// Current track time and complete track duration
var track_duration_ms = 0;
var progress_ms = 0;

// Main source
var main_chords_body = "";
var complete_source_code_found = 0;

// Flags to check for new track
var previous_track_id = -1;
var current_track_id = -1;

// flat and sharp
var amount_of_flats = 0;
var amount_of_sharps = 0;
// 0 = none, # = sharp, b = flat
var current_flat_or_sharp = "0"; 
var previous_flat_or_sharp = "0";

// Recommended, intital capo value for new track
var initial_capo_value = 0;
var previous_capo_value = 0;
var current_capo_value_int = 0;

// Musixmatch lyrics
var musixmatch_lyrics_is_linesynced = 0; 
var found_musixmatch_lyrics = 0; 

// False = paused, True = played (String because of python backend)
var song_played_or_paused = "False"; 

// Autoscroll is enabled or disabled
var dynamic_scroll = true;

// Line/element that is currently synced (i.e. timestamp â‰ˆ progress_ms)
var current_synced_line = 0;
// Every line/element with "IS_SYNCED_AT:<timestamp>" ID
var clickable_synced_lines_array = [];
// Array of all existing timestamps in the modified source code
var clickable_synced_lines_timestamp_array = [];

// Song timeline
var currently_hovering_timeline = false;
var changed_time_via_timeline = false;
var clicked_on_timeline = false;

// Currently changing track (requesting static data, halt dynamic in some places)
var in_track_change = false;

var spotify_error = 0;

var track_bpm = 0;
var track_key = 0;

var sync_ratio_percentage = "0%"

var lines_hover_and_clickable = "";

var sync_skip_on = 0;
var clicked_previous = 0;

var sync_button = "";
var bottom_hr = "";
var top_hr = "";

var is_on_touch_device = !!("ontouchstart" in window) || window.navigator.msMaxTouchPoints > 0;

// Settings variables
var setting_persist_capo_value = false;
var setting_persist_flat_or_sharp = true;

var settings_align = "left";
var align_capo_persister = false;
var align_flat_or_sharp_persister = true;

// Repeat Section
var clicked_counter_repeat_section = 0;
var repeat_section_on = false;
var first_line_time = -1;
var last_line_time = -1;
var already_in_section_request_first_line = false;
var resetRepeatSectionFunc = () => {};


// Spotify Player Buttons
var old_shuffle_button = "";
var old_repeat_button = "";
var old_play_or_pause_button = "";
var old_sync_button = "";
var new_sync_button = "";

// Local Storage
localStorage.getItem("key_local_storage_settings_align") == null ? localStorage.setItem("key_local_storage_settings_align", settings_align) : settings_align = localStorage.getItem("key_local_storage_settings_align");

localStorage.getItem("key_local_storage_setting_persist_capo_value") == null ? localStorage.setItem("key_local_storage_setting_persist_capo_value", setting_persist_capo_value) : setting_persist_capo_value = localStorage.getItem("key_local_storage_setting_persist_capo_value");
if (setting_persist_capo_value == "true") {
    localStorage.getItem("key_local_storage_previous_capo_value") == null ? localStorage.setItem("key_local_storage_previous_capo_value", current_capo_value_int) : current_capo_value_int = localStorage.getItem("key_local_storage_previous_capo_value");
} else {
    localStorage.setItem("key_local_storage_previous_capo_value", "0");
}

localStorage.getItem("key_local_storage_setting_persist_flat_or_sharp") == null ? localStorage.setItem("key_local_storage_setting_persist_flat_or_sharp", setting_persist_flat_or_sharp) : setting_persist_flat_or_sharp = localStorage.getItem("key_local_storage_setting_persist_flat_or_sharp");
if (setting_persist_flat_or_sharp == "true") {
    localStorage.getItem("key_local_storage_previous_flat_or_sharp") == null ? localStorage.setItem("key_local_storage_previous_flat_or_sharp", current_flat_or_sharp) : current_flat_or_sharp = localStorage.getItem("key_local_storage_previous_flat_or_sharp");
} else {
    localStorage.setItem("key_local_storage_previous_flat_or_sharp", "0");
}


//////// SLEEP/DELAY ////////
function sleepPromise(ms) {
    return new Promise(resolve => setTimeout(resolve, ms));
}


//////// WEB SOCKET ////////
var dev_or_prod = "{{ dev_or_prod }}";
var log_on_off = "{{ log_on_off }}";

if (dev_or_prod == "PRODUCTION") {
    console.log("In Production");
    var socket = io.connect('wss://chordsync.onrender.com');
}
else if (dev_or_prod == "DEVELOPMENT") {
    console.log("In Development");
    var socket = io.connect('http://' + document.domain + ':' + location.port); 
}

socket.on('connect', () => {
    console.log('WebSocket: Client (JavaScript) connected to Server (Python)');
});

socket.on('error_message', function(data) {
    alert(data.message);
});

// Repeat dynamic Websocket response every 250ms
setInterval(() => {
    socket.emit('trackDynamicDataRequest');
}, 250);

// For Logging:
if (dev_or_prod == "DEVELOPMENT" && log_on_off == "ON") {
    setInterval(() => {
        socket.emit('nextSpotifyTrack');
    }, 10000);
}

//////// Websocket response for parameters that DON'T change during the song ////////
socket.on('trackStaticDataResponse', (track_static_data) => {
    // Song Key
    try {
        track_key = sharOrFlatTranposer(transposeChord(track_static_data.track_key, 0), current_flat_or_sharp);
        if (track_key == "0") {
            track_key = "C";
        }
        document.getElementById("IDtrackKeyValue").textContent = track_key;
    } catch {
        console.log('%cNo track key available', 'color: yellow; font-weight: bold;');
    }
    
    // Sync Ratio
    sync_ratio_percentage = track_static_data.sync_ratio_percentage;
    sync_ratio_percentage_string = "Sync Available (" + sync_ratio_percentage + "%)";

    // Song BPM
    track_bpm = track_static_data.track_bpm;
    document.getElementById("IDtrackBPMvalue").textContent = track_bpm;

    // Capo local storage
    previous_capo_value = current_capo_value_int;
    localStorage.setItem("key_local_storage_previous_capo_value", previous_capo_value);

    // Sync Button (For color)
    sync_button = document.getElementById("IDsyncButton");
    bottom_hr = document.getElementById("IDbottomHR");
    top_hr = document.getElementById("IDtopHR");

    // Sync Skip Button
    if (sync_skip_on == 1 && clicked_previous == 0 && (track_static_data.musixmatch_lyrics_is_linesynced == 0 || track_static_data.complete_source_code_found == 0)) {
        socket.emit('nextSpotifyTrack');
        return;
    }
    if (sync_skip_on == 1 && clicked_previous == 1 && (track_static_data.musixmatch_lyrics_is_linesynced == 0 || track_static_data.complete_source_code_found == 0)) {
        socket.emit('previousSpotifyTrack');
        return;
    }
    clicked_previous = 0;

    // To halt diverse things at this state
    in_track_change = false;

    // Repeat Section Logic
    spotify_error = track_static_data.spotify_error;
    if (spotify_error == 1) {
        document.getElementById("IDrepeatSectionToggle").style.pointerEvents = 'none';
        document.getElementById("IDrepeatSectionToggle").title = "Repeat/Replay Section";
        document.getElementById("IDsourceCodeLink").style.opacity = "0.5";
        document.getElementById('IDdivMainChordsWrapper').style.justifyContent = "center";

        if (track_static_data.main_chords_body == "Couldn't find chords for that song.") {
            document.getElementById("IDsyncAvailableIMG").style.display = "block";
            document.getElementById("IDsyncAvailableIMG").style.visibility = "visible";
        } else {
            document.getElementById("IDsyncAvailableIMG").style.display = "none";
            document.getElementById("IDsyncAvailableIMG").style.visibility = "hidden";
        }
    } else {
        document.getElementById("IDrepeatSectionToggle").style.pointerEvents = 'auto';
        document.getElementById("IDsourceCodeLink").style.opacity = "1";
        document.getElementById("IDrepeatSectionToggle").title = "Repeat/Replay Section";
        document.getElementById('IDdivMainChordsWrapper').style.justifyContent = "flex-start";
        document.getElementById("IDsyncAvailableIMG").style.display = "block";
        document.getElementById("IDsyncAvailableIMG").style.visibility = "visible";
    }

    // Scroll to top of page when new track is loaded
    document.getElementById("IDdivMainChordsWrapper").scrollTo(0, 0);

    // Track name and artist
    document.getElementById('IDtrackName').textContent = track_static_data.track_name;
    document.getElementById('IDartistName').textContent = "by " + track_static_data.artist_name;

    // Track album cover (image and background image)
    if (track_static_data.album_cover_url != "") {
        document.getElementById('IDAlbum').src = track_static_data.album_cover_url;
        document.body.style.backgroundImage = `url(' ${track_static_data.album_cover_url} ')`;
    } else {
        document.getElementById('IDAlbum').src = "static/img/empty_album_placeholder.png"
        document.body.style.backgroundImage = `url(' {{ url_for('static', filename='/img/empty_album_placeholder.png') }} ')`;
    }

    // Track duration in mm:ss and ms
    document.getElementById('IDtrackDuration').textContent = track_static_data.track_duration_m_and_s;
    track_duration_ms = track_static_data.track_duration_ms;

    // Guitar tuning
    document.getElementById('IDguitarTuning').textContent = track_static_data.guitar_tuning;
    
    // Musixmatch lyrics 
    musixmatch_lyrics_is_linesynced = track_static_data.musixmatch_lyrics_is_linesynced;
    found_musixmatch_lyrics = track_static_data.found_musixmatch_lyrics;
    if (musixmatch_lyrics_is_linesynced == 0) {
        dynamic_scroll = false;
        document.getElementById('IDsyncAvailableIMG').src = "{{ url_for('static', filename='/img/sync_not_available_check.png') }}";
        document.getElementById('IDsyncAvailableIMG').style.filter = " drop-shadow(0 0 8px #fb6262)";
        document.getElementById('IDsyncAvailableIMG').title = "Sync Not Available";
    } else if (musixmatch_lyrics_is_linesynced == 1) {

        document.getElementById('IDsyncAvailableIMG').src = "{{ url_for('static', filename='/img/sync_available_check.png') }}";
        document.getElementById('IDsyncAvailableIMG').style.filter = " drop-shadow(0 0 8px #62dbfb)";
        document.getElementById('IDsyncAvailableIMG').title = sync_ratio_percentage_string;
    }

    //////// Main source ////////
    main_chords_body = track_static_data.main_chords_body;
    document.getElementById('IDdivMainChords').innerHTML = main_chords_body;

    // Make synced lines clickable and add hover effects
    lines_hover_and_clickable = () => {
        clickable_synced_lines_array = document.querySelectorAll(`[id*="${"IS_SYNCED_AT:"}"]`);
        clickable_synced_lines_array.forEach((line) => {
            let match = line.id.match(/^IS_SYNCED_AT:(.+)/);
            if (match) {
                clickable_synced_lines_timestamp_array.push(parseInt(match[1]));
            }

            line.addEventListener('click', (event) => {
                let syncedLineID = event.target.id;
                let match = syncedLineID.match(/^IS_SYNCED_AT:(.+)/);
                if (match) {
                    let lineTimestamp = match[1];

                    //////// Repeat Section Logic ////////
                    if (clicked_counter_repeat_section == 2 && repeat_section_on == true) {
                        // Make second line only clickable if difference to first line is bigger than 1 second
                        if (Math.abs(parseInt(first_line_time) - parseInt(lineTimestamp)) <= 1000) {
                            resetRepeatSectionFunc();
                        }

                        // Make the next next line the end timestamp (so that the ranges really covers the last line)
                        var next_line_timestamp = -1;
                        clickable_synced_lines_timestamp_array.forEach((line, index) => {
                            if (line == lineTimestamp) {
                                if (index < clickable_synced_lines_timestamp_array.length - 1) {
                                    next_line_timestamp = clickable_synced_lines_timestamp_array[index + 1];
                                }
                            }
                        })
                        // Is 0, when clicked the very last line
                        if (next_line_timestamp == 0) {
                            next_line_timestamp = track_duration_ms - 2000;
                        }
                        last_line_time = next_line_timestamp + 2000;
                        console.log("Last Line Time: " + last_line_time)
                        var style = document.createElement('style');
                        var existingStyle = document.querySelector('style#repeatSectionStyle');
                        var styleContent = `
                            @keyframes blinkAnimation {
                                0% { opacity: 1; }
                                50% { opacity: 0.5; }
                                100% { opacity: 1; }
                            }

                            #IDrepeatSectionToggle:checked:before {
                                background-image: url('/static/img/repeat_section_button_4.png');
                                background-size: cover;
                                animation: blinkAnimation 2s infinite; /* 2s for a complete blink, adjust as needed */
                            }
                        `;
                        if (existingStyle) {
                            existingStyle.innerHTML = styleContent;
                        } else {
                            style.innerHTML = styleContent;
                            style.id = 'repeatSectionStyle';
                            style.type = 'text/css';
                            document.head.appendChild(style);
                        }
                        dynamic_scroll = true;
                        clicked_counter_repeat_section = 3;
                        document.getElementById("IDrepeatSectionToggle").title = "Defined Section is being repeated";
                        socket.emit('jumpInsideTrack', parseInt(first_line_time));

                    } else if (clicked_counter_repeat_section == 1 && repeat_section_on == true) {
                        first_line_time = lineTimestamp;
                        console.log("First Line Time: " + first_line_time)

                        var style = document.createElement('style');
                        var existingStyle = document.querySelector('style#repeatSectionStyle');
                        var styleContent = `
                            #IDrepeatSectionToggle:checked:before {
                                background-image:url('/static/img/repeat_section_button_3.png');
                                background-size: cover;
                            }
                        `;
                        if (existingStyle) {
                            existingStyle.innerHTML = styleContent;
                        } else {
                            style.type = 'text/css';
                            style.id = 'repeatSectionStyle';
                            style.innerHTML = styleContent;
                            document.head.appendChild(style);
                        }
                        clicked_counter_repeat_section = 2;
                        document.getElementById("IDrepeatSectionToggle").title = "Click LINE to define END of Repeat Section";
                        socket.emit('jumpInsideTrack', parseInt(lineTimestamp));

                    } else {
                        socket.emit('jumpInsideTrack', parseInt(lineTimestamp));
                        document.getElementById("IDrepeatSectionToggle").title = "Repeat/Replay Section";
                        resetRepeatSectionFunc();
                    }  
                    // End Repeat Section Logic
                }

                // Scroll line instantly to center of screen
                try {
                    line.scrollIntoView({
                        behavior: 'smooth',
                        block: 'center',
                        inline: 'center'
                    });
                    line.scrollTo;
                } catch {
                    console.log('%cNo current synced line available - Could not center current line', 'color: yellow; font-weight: bold;');
                }
                // Wait 1 second before enabling dynamic scrolling again after click on synced line
                sleepPromise(1000).then(() => { dynamic_scroll = true; });        
            });

            // Lyrics line color change on hover
            line.addEventListener('mouseover', (event) => {
                if (!is_on_touch_device) {
                    if (repeat_section_on == true) {
                        line_color = "#f362fb";
                        drop_shadow = "drop-shadow(0 0 15px #f362fb)";
                    } else {
                        line_color = "#34df70";
                        drop_shadow = "drop-shadow(0 0 15px #34df70)";
                    }
                    line.style.color = line_color;
                    line.style.filter = drop_shadow;
                }
            });
            line.addEventListener('mouseout', (event) => {
                if (!is_on_touch_device) {
                    line.style.color = "white";
                    line.style.filter = "";
                }
            });

        });
    }
    lines_hover_and_clickable();
    

    //////// CHORDS SOURCE CODE URL AND ICON ////////
    document.getElementById('IDsourceCodeLink').href = track_static_data.complete_source_code_link;
    complete_source_code_found = track_static_data.complete_source_code_found;
    if (complete_source_code_found == 1) {
        document.getElementById('IDsourceCodeLink').querySelector('img').src = "{{ url_for('static', filename='/img/source_icon.png') }}";
        document.getElementById('IDdivMainChordsWrapper').style.justifyContent = "flex-start";
    } else if (complete_source_code_found == 0) {
        document.getElementById('IDsourceCodeLink').querySelector('img').src = "{{ url_for('static', filename='/img/search_icon.png') }}";
        document.getElementById('IDdivMainChordsWrapper').style.justifyContent = "center";

        document.getElementById('IDsyncAvailableIMG').src = "{{ url_for('static', filename='/img/sync_not_available_check.png') }}";
        document.getElementById('IDsyncAvailableIMG').style.filter = " drop-shadow(0 0 8px #fb6262)";
        document.getElementById('IDsyncAvailableIMG').title = "Sync Not Available";
    }


    //////// CAPO ////////
    document.getElementById('IDguitarCapo').textContent = track_static_data.guitar_capo;
    initial_capo_value = track_static_data.guitar_capo;
    if (initial_capo_value == -12) {
        document.getElementById('IDcapoMinusButton').style.opacity = "0.5";
        document.getElementById('IDcapoPlusButton').style.opacity = "1";
    } else if (initial_capo_value == 12) {
        document.getElementById('IDcapoMinusButton').style.opacity = "1";
        document.getElementById('IDcapoPlusButton').style.opacity = "0.5";
    } else {
        document.getElementById('IDcapoMinusButton').style.opacity = "1";
        document.getElementById('IDcapoPlusButton').style.opacity = "1";
    }
    document.getElementById("IDguitarCapo").style.fontWeight = "bold";
    document.getElementById("IDguitarCapo").style.color = "#1DB954";
    // Persist capo value between songs if settings turned on
    function persist_capo() {
        var difference = initial_capo_value - previous_capo_value;
        for (let i = 0; i < difference; ++i) {
            capoMinusFunc();
        }
        for (let i = 0; i > difference; --i) {
            capoPlusFunc();
        }
    }
    if (setting_persist_capo_value || align_capo_persister) {
        persist_capo();
    }
    align_capo_persister = false;


    //////// FLAT OR SHARP ////////
    let parser = new DOMParser();
    let parsed_body = parser.parseFromString(document.getElementById('IDdivMainChords').innerHTML, "text/html");
    let all_chords = parsed_body.getElementsByClassName("chord_span");
    // Reset global variables
    amount_of_flats = 0;
    amount_of_sharps = 0;

    previous_flat_or_sharp = current_flat_or_sharp;
    // Count flats and sharps in source code
    for (let i = 0; i < all_chords.length; i++) {
        amount_of_flats += (all_chords[i].innerHTML.match(/b/g) || []).length;
    }
    for (let i = 0; i < all_chords.length; i++) {
        amount_of_sharps += (all_chords[i].innerHTML.match(/#/g) || []).length;
    }
    if (amount_of_sharps > amount_of_flats) {
        // console.log("Hit sharps bigger flat");
        document.getElementById("IDsharpSymbol").style.fontWeight = "bold";
        document.getElementById("IDsharpSymbol").style.color = "#1DB954";
        document.getElementById("IDsharpSymbol").style.filter = "drop-shadow(0 0 8px #1DB954)";
        document.getElementById("IDflatSymbol").style.fontWeight = "normal";
        document.getElementById("IDflatSymbol").style.color = "white";
        document.getElementById("IDflatSymbol").style.filter = "";
        current_flat_or_sharp = "#";
        if ((setting_persist_flat_or_sharp || align_flat_or_sharp_persister || setting_persist_flat_or_sharp == "true") && previous_flat_or_sharp == "b") {
            current_flat_or_sharp = "b";
            flatOrSharpPersistSetting();
        }
    }
    if (amount_of_flats > amount_of_sharps) {
        // console.log("Hit flats bigger sharp");
        document.getElementById("IDflatSymbol").style.fontWeight = "bold";
        document.getElementById("IDflatSymbol").style.color = "#1DB954";
        document.getElementById("IDflatSymbol").style.filter = "drop-shadow(0 0 8px #1DB954)";
        document.getElementById("IDsharpSymbol").style.fontWeight = "normal";
        document.getElementById("IDsharpSymbol").style.color = "white";
        document.getElementById("IDsharpSymbol").style.filter = "";
        current_flat_or_sharp = "b";
        if ((setting_persist_flat_or_sharp || align_flat_or_sharp_persister || setting_persist_flat_or_sharp == "true") && previous_flat_or_sharp == "#") {
            current_flat_or_sharp = "#";
            flatOrSharpPersistSetting();
        }
    }
    if (amount_of_sharps == amount_of_flats) {
        // console.log("Hit sharps equal flat");
        document.getElementById("IDsharpSymbol").style.fontWeight = "normal";
        document.getElementById("IDsharpSymbol").style.color = "white";
        document.getElementById("IDsharpSymbol").style.filter = "";
        document.getElementById("IDflatSymbol").style.fontWeight = "normal";
        document.getElementById("IDflatSymbol").style.color = "white";
        document.getElementById("IDflatSymbol").style.filter = "";
        if (!setting_persist_flat_or_sharp || !align_flat_or_sharp_persister || setting_persist_flat_or_sharp == "false") {
            current_flat_or_sharp = "0";
        }
    }
    align_flat_or_sharp_persister = true;


    //////// USEFUL LOGS ////////
    console.log('%cArtist Name: ' + track_static_data.artist_name, 'color: #1DB954; font-weight: bold;');
    console.log('%cTrack Name: ' + track_static_data.track_name, 'color: #1DB954; font-weight: bold;');
    console.log('%cGuitar Tuning: ' + track_static_data.guitar_tuning, 'color: #1DB954; font-weight: bold;');
    console.log('%cInitial Guitar Capo: ' + track_static_data.guitar_capo, 'color: #1DB954; font-weight: bold;');
    console.log('%cFound Chords for Song (0/1): ' + complete_source_code_found, 'color: #1DB954; font-weight: bold;');
    console.log('%cFound Synced Lyrics (0/1): ' + musixmatch_lyrics_is_linesynced, 'color: #1DB954; font-weight: bold;');
    console.log('%cSpotify Error (0/1): ' + track_static_data.spotify_error, 'color: #1DB954; font-weight: bold;');

    // if alignment changed in settings, new static data is requested as spaces are added/removed between chords
    // also fix margins depending on alignment
    var chords_fix_margin_after_align = document.getElementsByClassName("chord_span");
    for (let i = 0; i < chords_fix_margin_after_align.length; i++) {
        if (settings_align == "left" && chords_fix_margin_after_align[i].style.margin != "0px 0px 0px 0px") {
            for (let s = 0; s < chords_fix_margin_after_align.length; s++) {
                chords_fix_margin_after_align[s].style.margin = "0px 0px 0px 0px";
            }    
        } 
        if (settings_align == "middle" && chords_fix_margin_after_align[i].style.margin != "0px 50px 0px 50px") {
            for (let s = 0; s < chords_fix_margin_after_align.length; s++) {
                chords_fix_margin_after_align[s].style.margin = "0px 50px 0px 50px";
            }
        }
    }

});



//////// Websocket response for parameters that change during the song ////////
socket.on('trackDynamicDataResponse', (track_dynamic_data) => {
    // New track -> Request new static Websocket data
    current_track_id = track_dynamic_data.track_id;
    if (track_dynamic_data.track_id != previous_track_id) {
        // Reset repeat Section
        resetRepeatSectionFunc = () => {
            first_line_time = -1;
            last_line_time = -1;
            clicked_counter_repeat_section = 0;
            repeat_section_on = false;

            var style = document.createElement('style');
            var existingStyle = document.querySelector('style#repeatSectionStyle');
            var styleContent = `
                #IDrepeatSectionToggle:checked:before {
                    background-image:url('/static/img/repeat_section_button_1.png');
                    background-size: cover;
                }
            `;
            if (existingStyle) {
                existingStyle.innerHTML = styleContent;
            } else {
                style.id = 'repeatSectionStyle';
                style.type = 'text/css';
                style.innerHTML = styleContent;
                document.head.appendChild(style);
            }
            var repeatSectionToggle = document.getElementById('IDrepeatSectionToggle');

            document.getElementById("IDrepeatSectionToggle").title = "Repeat/Replay Section";
            repeatSectionToggle.checked = false;
        } 
        resetRepeatSectionFunc();
        // End Reset repeat Section

        document.getElementById('IDdivMainChordsWrapper').style.justifyContent = "center";

        in_track_change = true;
        previous_track_id = track_dynamic_data.track_id;

        console.log('%c_____________________________________', 'color: white; font-weight: bold;');
        console.log('%cTrack ID: ' + track_dynamic_data.track_id, 'color: #1DB954; font-weight: bold;');

        // Insert loading animation until overwriting in Websocket static response
        document.getElementById('IDdivMainChords').innerHTML = '<img src="static/img/loading_animation.gif" alt="Loading Animation" style="width: calc(120px + 0.390625vw);">';
        main_chords_body = '<img src="static/img/loading_animation.gif" alt="Loading Animation" style="width: calc(120px + 0.390625vw);">';

        // Turn on autoscroll for every new track and scroll to top
        dynamic_scroll = true;
        document.getElementById("IDdivMainChordsWrapper").scrollTo(0, 0);
        socket.emit('trackStaticDataRequest', settings_align);
    }


    //////// Spotify Buttons and Timeline ////////
    var new_repeat_button;
    if (track_dynamic_data.current_repeat_state == "off") {
        new_repeat_button = "static/img/music_control/repeat_spotify_off.png";
    } else if (track_dynamic_data.current_repeat_state == "track") {
        new_repeat_button = "static/img/music_control/repeat_spotify_song.png";
    } else if (track_dynamic_data.current_repeat_state == "context") {
        new_repeat_button = "static/img/music_control/repeat_spotify_context.png";
    }
    if (old_repeat_button != new_repeat_button) {
        document.getElementById('IDrepeatSpotifyButton').src = new_repeat_button;
        old_repeat_button = new_repeat_button;
    }


    var new_shuffle_button;
    if (track_dynamic_data.current_shuffle_state == true) {
        new_shuffle_button = "static/img/music_control/shuffle_on.png";
    } else if (track_dynamic_data.current_shuffle_state == false) {
        new_shuffle_button = "static/img/music_control/shuffle_off.png";
    } else {
        new_shuffle_button = "static/img/music_control/shuffle_off.png";
    }
    if (old_shuffle_button != new_shuffle_button) {
        document.getElementById('IDshuffleButton').src = new_shuffle_button;
        old_shuffle_button = new_shuffle_button;
    }


    if (track_dynamic_data.current_volume != 0) {
        document.getElementById('IDAlbum').style.opacity = "1";
        document.getElementById('IDAlbum').style.borderRadius = "10px";
    } else {
        document.getElementById('IDAlbum').style.opacity = "0.5";
        document.getElementById('IDAlbum').style.borderRadius = "50%";
    }

    // Update Play/Pause button dynamically
    var new_play_or_pause_button;
    if (track_dynamic_data.play_or_pause == "True") {
        new_play_or_pause_button = "static/img/music_control/play_button.png";
        song_played_or_paused = "True";
    } else if (track_dynamic_data.play_or_pause == "False") {
        new_play_or_pause_button = "static/img/music_control/pause_button.png";
        song_played_or_paused = "False";
    }
    if (old_play_or_pause_button != new_play_or_pause_button) {
        document.getElementById('IDplayAndPauseButton').src = new_play_or_pause_button;
        old_play_or_pause_button = new_play_or_pause_button;
    }

    // Only update timeline and current time if user hasn't just clicked timeline on it or is currently hovering timeline
    if (!clicked_on_timeline && !currently_hovering_timeline) {
        document.getElementById('IDcurrentTime').textContent = track_dynamic_data.current_time;
        progress_ms = track_dynamic_data.progress_ms;

        let progress_ratio = progress_ms / track_duration_ms;
        let progress_percent = Math.round(progress_ratio * 100);
        document.getElementById('IDtimeLineFilled').style.width = progress_percent + "%";
    }


    //////// MAIN ALGORITHM TO CENTER CURRENT LINE ////////
    let scroll_box = document.getElementById("IDdivMainChordsWrapper");
    let scroll_to_value = scroll_box.scrollTop;

    // Turn of autoscroll if user scrolls manually
    scroll_box.addEventListener("wheel", () => {
        dynamic_scroll = false;
    });
    scroll_box.addEventListener("touchmove", () => {
        dynamic_scroll = false;
    });
    
    let max_scroll_value = scroll_box.scrollHeight - scroll_box.clientHeight;
    let min_scroll_value = 0;

    function calcDynamicScrolling(min_scroll_value, max_scroll_value, track_duration_ms, progress_ms, clickable_synced_lines_timestamp_array) {

        clickable_synced_lines_timestamp_array.forEach((timestamp) => {

            //////// Repeat Section Logic ////////
            if (clicked_counter_repeat_section == 3 && repeat_section_on == true && first_line_time != -1 && last_line_time != -1) {
                if (Math.abs(progress_ms - parseInt(last_line_time)) <= 500) {
                    if (already_in_section_request_first_line == false) {
                        already_in_section_request_first_line = true;
                        socket.emit('jumpInsideTrack', parseInt(first_line_time));
                        setTimeout(resetRepeatSectionFlag, 2000);
                    }   
                }
            }
            // End Repeat Section Logic

            if (Math.abs(progress_ms - timestamp) <= 200) {
                current_synced_line = document.getElementById("IS_SYNCED_AT:" + timestamp);
                if (!current_synced_line) {
                    current_synced_line = document.getElementById("IS_SYNCED_AT:" + timestamp + ".0");
                }

                try {
                    current_synced_line.scrollIntoView({
                        behavior: 'smooth',
                        block: 'center',
                        inline: 'center'
                    });
                    current_synced_line.scrollTo;

                    // new, dynamic highlight testing
                    /*
                    clickable_synced_lines_array.forEach((line, index) => {
                        if ((!line.classList.contains('LERP_LINE')) && (Math.abs(progress_ms - clickable_synced_lines_timestamp_array[index]) > 4000)) {
                            line.style.color = "white";
                            line.style.filter = "";
                            line.innerText = line.innerText.replace("â€¢ ", "");
                            line.innerText = line.innerText.replace(" â€¢", "");
                            line.style.fontWeight = "normal";
                            
                        }
                    });
                    if (!current_synced_line.classList.contains('LERP_LINE')) {
                        //current_synced_line.style.color = '#1DB954';
                        //current_synced_line.style.filter = 'drop-shadow(0 0 15px #1DB954)';
                        //current_synced_line.innerText = "â€¢ " + current_synced_line.innerText + " â€¢";
                        current_synced_line.style.fontWeight = "bold";
                        console.log(current_synced_line.innerText)
                    }
                    */
                    // end new, dynamic highlight testing
                } catch(e) {
                    console.log('The exact error message is: ' + e);
                    console.log('%cNo current synced line available - Could not center current line', 'color: yellow; font-weight: bold;');
                }
            }
        });

    }

    // Depending on wether dynamic scrolling is enabled or disabled 
    // -> change sync button appearance and enable calcDynamicScrolling() function
    if (!dynamic_scroll && musixmatch_lyrics_is_linesynced == 1 && in_track_change == false) {
        new_sync_button = "{{ url_for('static', filename='/img/sync_button.png') }}";
        if (new_sync_button != old_sync_button) {
            sync_button.src = new_sync_button;
            sync_button.style.filter = "";
            sync_button.style.opacity = "0.5";
            old_sync_button = new_sync_button;
        }

        bottom_hr.classList.remove("classHRsyncOn");
        top_hr.classList.remove("classHRsyncOn");
        bottom_hr.classList.remove("classHRsyncOnWithRepeat");
        top_hr.classList.remove("classHRsyncOnWithRepeat");
        if (repeat_section_on == true && clicked_counter_repeat_section == 3) {
            resetRepeatSectionFunc();
        }
    }

    if (dynamic_scroll && musixmatch_lyrics_is_linesynced == 1 && in_track_change == false) {
        calcDynamicScrolling(min_scroll_value, max_scroll_value, track_duration_ms, progress_ms, clickable_synced_lines_timestamp_array);
        new_sync_button = "{{ url_for('static', filename='/img/sync_button_blue.png') }}";
        if (new_sync_button != old_sync_button) {
            sync_button.src = new_sync_button;
            sync_button.style.filter = "drop-shadow(0 0 15px #62dbfb)";
            sync_button.style.opacity = "1";
            old_sync_button = new_sync_button;
        }

        bottom_hr.classList.add("classHRsyncOn");
        top_hr.classList.add("classHRsyncOn");
        bottom_hr.classList.remove("classHRsyncOnWithRepeat");
        top_hr.classList.remove("classHRsyncOnWithRepeat");

        if (clicked_counter_repeat_section == 3 && repeat_section_on == true) {
            bottom_hr.classList.add("classHRsyncOnWithRepeat");
            top_hr.classList.add("classHRsyncOnWithRepeat");
            bottom_hr.classList.remove("classHRsyncOn");
            top_hr.classList.remove("classHRsyncOn");
        }
    }

    // No synced lyrics available cases
    if (!dynamic_scroll && musixmatch_lyrics_is_linesynced == 0 && in_track_change == false) {
        document.getElementById('IDdivMainChordsWrapper').style.justifyContent = "flex-start";
        document.getElementById('IDdivMainChords').innerHTML = main_chords_body;

        new_sync_button = "{{ url_for('static', filename='/img/sync_button.png') }}";
        if (new_sync_button != old_sync_button) {
            sync_button.src = new_sync_button;
            sync_button.style.filter = "";
            sync_button.style.opacity = "0.5";
            old_sync_button = new_sync_button;
        }

        bottom_hr.classList.remove("classHRsyncOn");
        top_hr.classList.remove("classHRsyncOn");
        bottom_hr.classList.remove("classHRsyncOnWithRepeat");
        top_hr.classList.remove("classHRsyncOnWithRepeat");
    }

    // If no synced lyrics are available -> Display error message when enabling sync
    if (dynamic_scroll && musixmatch_lyrics_is_linesynced == 0 && in_track_change == false) {
        document.getElementById('IDdivMainChordsWrapper').style.justifyContent = "center";
        // Don't also rewrite main_chords_body to persist previous content
        document.getElementById('IDdivMainChords').innerHTML = "Syncing chords not possible for this song.";

        new_sync_button = "{{ url_for('static', filename='/img/sync_button_blue.png') }}";
        if (new_sync_button != old_sync_button) {
            sync_button.src = new_sync_button;
            sync_button.style.filter = "drop-shadow(0 0 15px #62dbfb)";
            sync_button.style.opacity = "1";
            old_sync_button = new_sync_button;
        }

        bottom_hr.classList.add("classHRsyncOn");
        top_hr.classList.add("classHRsyncOn");
        bottom_hr.classList.remove("classHRsyncOnWithRepeat");
        top_hr.classList.remove("classHRsyncOnWithRepeat");
    }

    // Center error messages and don't influence lyrics' left alignment
    if (complete_source_code_found == 0) {
        document.getElementById('IDdivMainChordsWrapper').style.justifyContent = "center";
    }

});    